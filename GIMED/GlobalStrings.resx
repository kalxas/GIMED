<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MsgCodeExists" xml:space="preserve">
    <value>Code already exists</value>
  </data>
  <data name="MsgFillEBLong" xml:space="preserve">
    <value>Fill in a East Bound Longitude</value>
  </data>
  <data name="MsgFillEmail" xml:space="preserve">
    <value>Fill in an e-mail address</value>
  </data>
  <data name="MsgFillEmailAddress" xml:space="preserve">
    <value>Fill in an e-mail address</value>
  </data>
  <data name="MsgFillInCode" xml:space="preserve">
    <value>Fill in a Code</value>
  </data>
  <data name="MsgFillInKeyword" xml:space="preserve">
    <value>Fill in a keyword</value>
  </data>
  <data name="MsgFillInVocabulary" xml:space="preserve">
    <value>Fill in a vocabulary name</value>
  </data>
  <data name="MsgFillNBLat" xml:space="preserve">
    <value>Fill in a North Bound Latitude</value>
  </data>
  <data name="MsgFillOrgName" xml:space="preserve">
    <value>Fill in an Organisation Name</value>
  </data>
  <data name="MsgFillSBLat" xml:space="preserve">
    <value>Fill in a South Bound Latitude</value>
  </data>
  <data name="MsgFillUrl" xml:space="preserve">
    <value>Fill in an address (URL)</value>
  </data>
  <data name="MsgFillWBLong" xml:space="preserve">
    <value>Fill in a West Bound Longitude</value>
  </data>
  <data name="MsgInspireThemeExists" xml:space="preserve">
    <value>The Data Theme already exists</value>
  </data>
  <data name="MsgInvalidEmail" xml:space="preserve">
    <value>E-mail address not valid</value>
  </data>
  <data name="MsgInvalidUrl" xml:space="preserve">
    <value>Not a valid URL</value>
  </data>
  <data name="MsgKeywordExists" xml:space="preserve">
    <value>The keyword already exists</value>
  </data>
  <data name="MsgMailExists" xml:space="preserve">
    <value>E-mail address already exists</value>
  </data>
  <data name="MsgOrgExists" xml:space="preserve">
    <value>Organization info already exists</value>
  </data>
  <data name="MsgResourceLangExists" xml:space="preserve">
    <value>Resource Language already exists</value>
  </data>
  <data name="MsgSelContactToRemove" xml:space="preserve">
    <value>Select a contact to remove</value>
  </data>
  <data name="MsgSelInspireTheme" xml:space="preserve">
    <value>Select an Inspire Data Theme</value>
  </data>
  <data name="MsgSelItemToRemove" xml:space="preserve">
    <value>Select an item to remove</value>
  </data>
  <data name="MsgSelMailToRemove" xml:space="preserve">
    <value>Select an e-mail to remove</value>
  </data>
  <data name="MsgSelRecToRemove" xml:space="preserve">
    <value>Select a record to remove</value>
  </data>
  <data name="MsgSelRefDateType" xml:space="preserve">
    <value>Select a reference date type</value>
  </data>
  <data name="MsgSelResourceLang" xml:space="preserve">
    <value>Select Resource Language</value>
  </data>
  <data name="MsgSelTopicCategory" xml:space="preserve">
    <value>Select Topic Category</value>
  </data>
  <data name="MsgSelTopicCategoryToRemove" xml:space="preserve">
    <value>Select a Topic Category to remove</value>
  </data>
  <data name="MsgTopicCatSelected" xml:space="preserve">
    <value>This topic category is already selected</value>
  </data>
  <data name="MsgUrlExists" xml:space="preserve">
    <value>URL already exists</value>
  </data>
</root>